<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="namespacelibecpint" kind="namespace" language="C++">
    <compoundname>libecpint</compoundname>
    <innerclass refid="classlibecpint_1_1_angular_integral" prot="public">libecpint::AngularIntegral</innerclass>
    <innerclass refid="classlibecpint_1_1_bessel_function" prot="public">libecpint::BesselFunction</innerclass>
    <innerclass refid="structlibecpint_1_1_e_c_p" prot="public">libecpint::ECP</innerclass>
    <innerclass refid="classlibecpint_1_1_e_c_p_basis" prot="public">libecpint::ECPBasis</innerclass>
    <innerclass refid="classlibecpint_1_1_e_c_p_integral" prot="public">libecpint::ECPIntegral</innerclass>
    <innerclass refid="structlibecpint_1_1_e_c_p_integrator" prot="public">libecpint::ECPIntegrator</innerclass>
    <innerclass refid="structlibecpint_1_1_five_index" prot="public">libecpint::FiveIndex</innerclass>
    <innerclass refid="structlibecpint_1_1_gaussian_e_c_p" prot="public">libecpint::GaussianECP</innerclass>
    <innerclass refid="structlibecpint_1_1_gaussian_shell" prot="public">libecpint::GaussianShell</innerclass>
    <innerclass refid="classlibecpint_1_1_g_c_quadrature" prot="public">libecpint::GCQuadrature</innerclass>
    <innerclass refid="classlibecpint_1_1_radial_integral" prot="public">libecpint::RadialIntegral</innerclass>
    <innerclass refid="structlibecpint_1_1_seven_index" prot="public">libecpint::SevenIndex</innerclass>
    <innerclass refid="structlibecpint_1_1_shell_pair_data" prot="public">libecpint::ShellPairData</innerclass>
    <innerclass refid="structlibecpint_1_1_sum_term" prot="public">libecpint::SumTerm</innerclass>
    <innerclass refid="structlibecpint_1_1_three_index" prot="public">libecpint::ThreeIndex</innerclass>
    <innerclass refid="structlibecpint_1_1_two_index" prot="public">libecpint::TwoIndex</innerclass>
    <innernamespace refid="namespacelibecpint_1_1aux">libecpint::aux</innernamespace>
    <innernamespace refid="namespacelibecpint_1_1qgen">libecpint::qgen</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacelibecpint_1a61c66c38649b648ca25caaff9ebc6c3f" prot="public" static="no">
        <name>GCTYPE</name>
        <enumvalue id="namespacelibecpint_1a61c66c38649b648ca25caaff9ebc6c3faf2e6a20e628fc9be0ff38027d732664a" prot="public">
          <name>ONEPOINT</name>
          <briefdescription>
<para>Described in Perez92. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacelibecpint_1a61c66c38649b648ca25caaff9ebc6c3fa56b5dd9ab1cc8971737f1c6c14d32e52" prot="public">
          <name>TWOPOINT</name>
          <briefdescription>
<para>Described in Perez93. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Different choices of integration algorithm, see references. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/gaussquad.hpp" line="34" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/gaussquad.hpp" bodystart="34" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacelibecpint_1a7676a778fedc78dfdc0495c3319a2730" prot="public" static="no">
        <type>std::tuple&lt; int, int &gt;</type>
        <definition>using libecpint::Pair = typedef std::tuple&lt;int, int&gt;</definition>
        <argsstring></argsstring>
        <name>Pair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" line="42" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacelibecpint_1af2651847fa01dec731554db1e7b273fd" prot="public" static="no">
        <type>std::tuple&lt; int, int, int &gt;</type>
        <definition>using libecpint::Triple = typedef std::tuple&lt;int, int, int&gt;</definition>
        <argsstring></argsstring>
        <name>Triple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" line="43" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacelibecpint_1a4dc36ca1c5a9247d8bfaac304a7df40f" prot="public" static="no">
        <type>std::tuple&lt; int, int, int, int, int &gt;</type>
        <definition>using libecpint::Quintuple = typedef std::tuple&lt;int, int, int, int, int&gt;</definition>
        <argsstring></argsstring>
        <name>Quintuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" line="44" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacelibecpint_1a48b53f3b6bfb449ec300ab57fc03763c" prot="public" static="no">
        <type>std::tuple&lt; int, int, int, int, int, int, int &gt;</type>
        <definition>using libecpint::Heptuple = typedef std::tuple&lt;int, int, int, int, int, int, int&gt;</definition>
        <argsstring></argsstring>
        <name>Heptuple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" line="45" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacelibecpint_1a975e7b9e0f57709418adede308d80405" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double libecpint::FAC</definition>
        <argsstring>[MAX_FAC]</argsstring>
        <name>FAC</name>
        <briefdescription>
<para>Array of factorials. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" line="31" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacelibecpint_1a4ecb557cc8bf8d94cfa80855985007bf" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double libecpint::DFAC</definition>
        <argsstring>[MAX_DFAC]</argsstring>
        <name>DFAC</name>
        <briefdescription>
<para>Array of double factorials. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" line="32" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacelibecpint_1ae671d7a17c7b2fc7ebf29b27fa266421" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double libecpint::SMALL</definition>
        <argsstring></argsstring>
        <name>SMALL</name>
        <initializer>= 1.0E-7</initializer>
        <briefdescription>
<para>Numerical tolerance of z below which K_n(z) = { 1 (n=0), 0 otherwise }. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/bessel.hpp" line="32" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/bessel.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacelibecpint_1a6d710d758ea6c068b95c21ce439ecb21" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int libecpint::TAYLOR_CUT</definition>
        <argsstring></argsstring>
        <name>TAYLOR_CUT</name>
        <initializer>= 5</initializer>
        <briefdescription>
<para>Order of local Taylor series to be used in Bessel function expansion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/bessel.hpp" line="33" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/bessel.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacelibecpint_1a451c1c2142ac7d2cbf57f3fcba419373" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double libecpint::ROOT_PI</definition>
        <argsstring></argsstring>
        <name>ROOT_PI</name>
        <initializer>= 1.772453850905516</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/mathutil.hpp" line="45" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/mathutil.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacelibecpint_1a4fc3cf89f4b0b1787baabc364a16e377" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double libecpint::GAMMA[30]</definition>
        <argsstring>[30]</argsstring>
        <name>GAMMA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gamma function tabulation, where GAMMA[i] = Gamma((i+1)/2) e.g. GAMMA[0] = Gamma(1/2) = sqrt(Pi), GAMMA[1] = 0! = 1, GAMMA[2] = Gamma(3/2) = sqrt(Pi) / 2, etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/mathutil.hpp" line="54" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/mathutil.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacelibecpint_1a3a4ed9b49d76dd6974d2dbc6bb181ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; libecpint::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const SumTerm &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structlibecpint_1_1_sum_term" kindref="compound">SumTerm</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/src/generate.cpp" line="137" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/src/generate.cpp" bodystart="137" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibecpint_1a9630ee3fefeb8b74101ee1a6b9678a54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libecpint::print_lists</definition>
        <argsstring>(std::vector&lt; SumTerm &gt; &amp;terms)</argsstring>
        <name>print_lists</name>
        <param>
          <type>std::vector&lt; <ref refid="structlibecpint_1_1_sum_term" kindref="compound">SumTerm</ref> &gt; &amp;</type>
          <declname>terms</declname>
        </param>
        <briefdescription>
<para>Redundant at the moment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/src/generate.cpp" line="145" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/src/generate.cpp" bodystart="145" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibecpint_1a1d3c6308d05c89cb1f49ca5049ab3fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libecpint::generate_lists</definition>
        <argsstring>(int LA, int LB, int lam, AngularIntegral &amp;angInts)</argsstring>
        <name>generate_lists</name>
        <param>
          <type>int</type>
          <declname>LA</declname>
        </param>
        <param>
          <type>int</type>
          <declname>LB</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lam</declname>
        </param>
        <param>
          <type><ref refid="classlibecpint_1_1_angular_integral" kindref="compound">AngularIntegral</ref> &amp;</type>
          <declname>angInts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>For a given <ref refid="structlibecpint_1_1_e_c_p" kindref="compound">ECP</ref> integral, Q(LA, LB, lam), generates the integral code. This determines which radial integrals are necessary, based on angular integral screening. If LA, LB &lt;= maxUnrol and (LA + LB + lam) &lt;= 3*maxUnrol, then it unrols the angular integration as well.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>LA</parametername>
</parameternamelist>
<parameterdescription>
<para>- the shellA angular momentum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LB</parametername>
</parameternamelist>
<parameterdescription>
<para>- the shellB angular momentum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lam</parametername>
</parameternamelist>
<parameterdescription>
<para>- the <ref refid="structlibecpint_1_1_e_c_p" kindref="compound">ECP</ref> angular momentum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>angInts</parametername>
</parameternamelist>
<parameterdescription>
<para>- the angular integrals </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/src/generate.cpp" line="191" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/src/generate.cpp" bodystart="191" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibecpint_1a0d3d7448d52abd739d6d100afa6d4e8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void libecpint::initFactorials</definition>
        <argsstring>()</argsstring>
        <name>initFactorials</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialises the global factorial and double factorial arrays </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" line="34" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" bodystart="34" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibecpint_1af2fa15848e7d9cfe1e61fc579a94080d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structlibecpint_1_1_two_index" kindref="compound">TwoIndex</ref>&lt; double &gt;</type>
        <definition>TwoIndex&lt; double &gt; libecpint::realSphericalHarmonics</definition>
        <argsstring>(int lmax, double x, double phi)</argsstring>
        <name>realSphericalHarmonics</name>
        <param>
          <type>int</type>
          <declname>lmax</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>phi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates real spherical harmonics S_lm(theta, phi) for all l, m up to lmax <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lmax</parametername>
</parameternamelist>
<parameterdescription>
<para>- the maximum angular momentum needed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>- cos(theta), where theta is the polar angle in spherical coordinates </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phi</parametername>
</parameternamelist>
<parameterdescription>
<para>- the azimuth angle in spherical coordinates </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a matrix S(l, l+m) of the spherical harmonic values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" line="48" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/src/lib/mathutil.cpp" bodystart="48" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibecpint_1a23ce2cda098d601b0fddfb10b971e33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ch</type>
          </param>
          <param>
            <type>class Tr</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto libecpint::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Ch, Tr &gt; &amp;os, std::tuple&lt; Args... &gt; const &amp;t) -&gt; std::basic_ostream&lt; Ch, Tr &gt; &amp;</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Ch, Tr &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>std::tuple&lt; Args... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" line="61" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/libecpint/multiarr.hpp" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="namespacelibecpint_1a25b52c5d023603d9fb96ea30fc36a4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int libecpint::check_file</definition>
        <argsstring>(std::string filename, std::vector&lt; T &gt; &amp;results)</argsstring>
        <name>check_file</name>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/robertshaw/devfiles/libecpint_new/include/testutil.hpp" line="14" column="1" bodyfile="/Users/robertshaw/devfiles/libecpint_new/include/testutil.hpp" bodystart="14" bodyend="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/robertshaw/devfiles/libecpint_new/src/generate.cpp" line="46" column="1"/>
  </compounddef>
</doxygen>
